{"version":3,"sources":["logo.svg","actions/ApplicationAction.js","component/MainComponent.js","component/SideComponent.js","App.js","serviceWorker.js","reducers/rootReducer.js","reducers/mainReducer.js","index.js"],"names":["module","exports","storeSidePanelData","ob","dispatch","type","payload","storeMcqData","MainComponent","props","showHideAnswer","inx","questionArray","mcqData","questionArrayES6","questionsList","showAnswer","onChangePage","str","tempArray","sidePanelData","tempArrayES6","i","length","selected","changePageData","id","val","window","location","href","origin","pathname","fetch","then","response","json","data","state","queryString","search","jsonName","URLSearchParams","get","this","className","onClick","undefined","map","index","key","questionId","question","options","currentOb","questionNumber","name","questionLabel","style","display","answer","dangerouslySetInnerHTML","__html","description","Component","connect","mainReducer","applicationAction","SideComponent","showCurrentTab","e","App","Boolean","hostname","match","combineReducers","action","testStore","createStore","rootReducers","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.adbf9880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function storeSidePanelData(ob) {\r\n    return (dispatch) => {\r\n        dispatch({ type: \"SIDE_PANEL_DATA\", payload: ob });\r\n    }\r\n}\r\nexport function storeMcqData(ob) {\r\n    return (dispatch) => {\r\n        dispatch({ type: \"MCQ_DATA\", payload: ob });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as applicationAction from '../actions/ApplicationAction';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    sidePanelData: state.mainReducer.sidePanelData,\r\n    mcqData: state.mainReducer.mcqData\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    storeSidePanelData: (ob) => { dispatch(applicationAction.storeSidePanelData(ob)) },\r\n    storeMcqData: (ob) => { dispatch(applicationAction.storeMcqData(ob)) }\r\n})\r\nclass MainComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const jsonName = urlParams.get('ques');\r\n        fetch('data/' + jsonName + '.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //this.setState({ data: data })\r\n                this.props.storeMcqData(data)\r\n            });\r\n    }\r\n    showHideAnswer = (inx) => {\r\n        let questionArray = this.props.mcqData;\r\n        let questionArrayES6 = { ...questionArray };\r\n        questionArrayES6.questionsList[inx].showAnswer = !questionArrayES6.questionsList[inx].showAnswer;\r\n        this.props.storeMcqData(questionArrayES6)\r\n        // this.setState({ data: questionArray })\r\n    }\r\n    onChangePage = (str) => {\r\n        let tempArray = this.props.sidePanelData;\r\n        let tempArrayES6 = [...tempArray];\r\n        for (let i = 0; i < tempArrayES6.length; i++) {\r\n            if (tempArrayES6[i].selected == true) {\r\n                if (str == \"next\" && i !== (tempArrayES6.length - 1)) {\r\n                    tempArrayES6[i].selected = false;\r\n                    tempArrayES6[i + 1].selected = true;\r\n                    this.changePageData(tempArrayES6[i + 1].id);\r\n                }\r\n                if (str == \"prev\" && i !== 0) {\r\n                    tempArrayES6[i].selected = false;\r\n                    tempArrayES6[i - 1].selected = true;\r\n                    this.changePageData(tempArrayES6[i - 1].id);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        this.props.storeSidePanelData(tempArrayES6)\r\n    }\r\n    changePageData = (val) => {\r\n        window.location.href = window.location.origin + window.location.pathname + '?ques=' + val;\r\n        fetch('data/' + val + '.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.props.storeMcqData(data)\r\n            });\r\n    }\r\n    render() {\r\n        const { mcqData } = this.props;\r\n        return (\r\n            <div id=\"mainArea\" className=\"col-sm-9 p-5\">\r\n                <div id=\"preNextBtnContainer\" className=\"row\">\r\n                    <a href=\"javascript:void(0);\" onClick={() => this.onChangePage(\"prev\")}>&lt; Previous</a>\r\n                    <span className=\"col-sm-8\"></span>\r\n                    <a href=\"javascript:void(0);\" onClick={() => this.onChangePage(\"next\")}>Next &gt;</a>\r\n                </div>\r\n                {mcqData !== undefined && mcqData.questionsList.map((ob, index) => {\r\n                    return (<div key={ob.questionId}>\r\n                        <p><strong>Question{index + 1}: </strong>{ob.question}</p>\r\n                        <div>\r\n                            {ob.options !== undefined && ob.options.map((currentOb, index) => {\r\n                                return (<div className=\"questionContainer\">\r\n                                    <strong><label>({currentOb.questionNumber})</label></strong>\r\n                                    <input type=\"radio\" name={ob.questionId}></input>\r\n                                    <label>{currentOb.questionLabel}</label>\r\n                                </div>)\r\n                            })}\r\n                            <div style={{ display: (ob.showAnswer == true) ? \"\" : \"none\" }}>\r\n                                <strong><label>Answer:</label></strong>\r\n                                <span className=\"correctAnswer\">{ob.answer.questionNumber}</span>\r\n                                <br></br>\r\n                                <div className=\"codeParent\">\r\n                                    <code>\r\n                                        <span dangerouslySetInnerHTML={{ __html: ob.answer.description }}></span>\r\n                                    </code>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"pt-1 pb-3\">\r\n                                <button onClick={() => this.showHideAnswer(index)}>{(ob.showAnswer) ? \"Hide Answer\" : \"View Answer\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>)\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(MainComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as applicationAction from '../actions/ApplicationAction';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    sidePanelData: state.mainReducer.sidePanelData\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    storeSidePanelData: (ob) => { dispatch(applicationAction.storeSidePanelData(ob)) },\r\n    storeMcqData: (ob) => { dispatch(applicationAction.storeMcqData(ob)) }\r\n})\r\nclass SideComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            //data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const jsonName = urlParams.get('ques');\r\n        fetch('data/side-bar.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                /********************For change side selection********************/\r\n                let tempArray = data;\r\n                let tempArrayES6 = [...tempArray];\r\n                for (let i = 0; i < tempArrayES6.length; i++) {\r\n                    if (tempArrayES6[i].id === jsonName) {\r\n                        tempArrayES6[i].selected = true;\r\n                    }\r\n                    else {\r\n                        tempArrayES6[i].selected = false;\r\n                    }\r\n                }\r\n                /*****************End of side selection******************************/\r\n                this.props.storeSidePanelData(tempArrayES6)\r\n            });\r\n    }\r\n    showCurrentTab = (e, index) => {\r\n        let tempArray = this.props.sidePanelData;\r\n        let tempArrayES6 = [...tempArray];\r\n        for (let i = 0; i < tempArray.length; i++) {\r\n            if (tempArrayES6[i].selected == true) {\r\n                tempArrayES6[i].selected = false;\r\n                break;\r\n            }\r\n        }\r\n        tempArrayES6[index].selected = true;\r\n        this.changePageData(tempArrayES6[index].id);\r\n        this.props.storeSidePanelData(tempArrayES6)\r\n    }\r\n    changePageData = (val) => {\r\n        window.location.href = window.location.origin + window.location.pathname + '?ques=' + val;\r\n        fetch('data/' + val + '.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.props.storeMcqData(data)\r\n            });\r\n    }\r\n    render() {\r\n        const { sidePanelData } = this.props;\r\n        return (\r\n            <div id=\"sideBar\" className=\"col-sm-3\">\r\n                <div>\r\n                    {sidePanelData !== undefined && sidePanelData.map((ob, index) => {\r\n                        return (\r\n                            <a id={ob.id} key={ob.name} href=\"javascript:void(0);\" onClick={(e) => this.showCurrentTab(e, index)}\r\n                                className={ob.selected ? \"active\" : \"\"}>\r\n                                {ob.name}\r\n                            </a>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(SideComponent);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainComponent from './component/MainComponent';\nimport SideComponent from './component/SideComponent';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <SideComponent />\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport mainReducer from './mainReducer';\r\nexport default combineReducers({ mainReducer });","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"SIDE_PANEL_DATA\":\r\n            return {\r\n                ...state,\r\n                sidePanelData: action.payload\r\n            }\r\n        case \"MCQ_DATA\":\r\n            return {\r\n                ...state,\r\n                mcqData: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducers from \"./reducers/rootReducer\";\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nexport const testStore = createStore(rootReducers, applyMiddleware(thunk))\n\nReactDOM.render(<Provider store={testStore}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}