{"version":3,"sources":["logo.svg","component/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainComponent","props","showHideAnswer","inx","questionArray","state","data","questionsList","showAnswer","setState","fetch","then","response","json","undefined","this","map","ob","index","question","type","name","questionId","defaultChecked","style","display","answer","questionNumber","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0ICuD5BC,E,kDApDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYVC,eAAiB,SAACC,GACd,IAAIC,EAAgB,EAAKC,MAAMC,KAC/BF,EAAcG,cAAcJ,GAAKK,YAAcJ,EAAcG,cAAcJ,GAAKK,WAChF,EAAKC,SAAS,CAAEH,KAAMF,KAdtB,EAAKC,MAAQ,CACTC,KAAM,IAHK,E,gEAME,IAAD,OAChBI,MAAM,uBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GACF,EAAKG,SAAS,CAAEH,KAAMA,S,+BAQxB,IAAD,OACL,OACI,kCACuCQ,IAAlCC,KAAKV,MAAMC,KAAKC,eAA+BQ,KAAKV,MAAMC,KAAKC,cAAcS,KAAI,SAACC,EAAIC,GACnF,OAAQ,6BACJ,2BAAG,2CAAiBA,EAAQ,EAAzB,MAAuCD,EAAGE,UAC7C,6BACI,6BACI,sCAAkB,+BAAO,2BAAOC,KAAK,QAAQC,KAAMJ,EAAGK,WAAYC,gBAAc,IAA9D,aAEtB,6BACI,sCAAkB,+BAAO,2BAAOH,KAAK,QAAQC,KAAMJ,EAAGK,aAApC,aAEtB,6BACI,sCAAkB,+BAAO,2BAAOF,KAAK,QAAQC,KAAMJ,EAAGK,aAApC,aAEtB,6BACI,sCAAkB,+BAAO,2BAAOF,KAAK,QAAQC,KAAMJ,EAAGK,aAApC,aAEtB,yBAAKE,MAAO,CAAEC,QAA2B,GAAjBR,EAAGT,WAAsB,GAAK,SAClD,0CACA,8BAAOS,EAAGS,OAAOC,iBAErB,6BACI,4BAAQC,QAAS,kBAAM,EAAK1B,eAAegB,KAA3C,0B,GA3CJW,aCWbC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd6a8181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass MainComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('data/questions.json')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ data: data })\r\n            });\r\n    }\r\n    showHideAnswer = (inx) => {\r\n        let questionArray = this.state.data;\r\n        questionArray.questionsList[inx].showAnswer = !questionArray.questionsList[inx].showAnswer;\r\n        this.setState({ data: questionArray })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.data.questionsList !== undefined && this.state.data.questionsList.map((ob, index) => {\r\n                    return (<div>\r\n                        <p><strong>Question{index + 1}: </strong>{ob.question}</p>\r\n                        <div>\r\n                            <div>\r\n                                <label>(A)</label><label><input type=\"radio\" name={ob.questionId} defaultChecked></input>Option 1</label>\r\n                            </div>\r\n                            <div>\r\n                                <label>(B)</label><label><input type=\"radio\" name={ob.questionId}></input>Option 2</label>\r\n                            </div>\r\n                            <div>\r\n                                <label>(C)</label><label><input type=\"radio\" name={ob.questionId}></input>Option 3</label>\r\n                            </div>\r\n                            <div>\r\n                                <label>(D)</label><label><input type=\"radio\" name={ob.questionId}></input>Option 3</label>\r\n                            </div>\r\n                            <div style={{ display: (ob.showAnswer == true) ? \"\" : \"none\" }}>\r\n                                <label>Answer:</label>\r\n                                <span>{ob.answer.questionNumber}</span>\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={() => this.showHideAnswer(index)}>View Answer</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>)\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainComponent from './component/MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}